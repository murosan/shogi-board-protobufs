syntax = "proto3";

package v1;

service ShogiBoard {
  // サーバーを初期化。フロントから最初にアクセスするときに叩く
  // サーバーは接続済のエンジンがあれば全て閉じる
  // 接続可能な将棋エンジンの名前一覧を返す
  rpc Initialize(Request) returns (EngineNames);

  // 将棋エンジンに接続
  rpc Connect(EngineName) returns (Response);

  // 将棋エンジンとの接続を解除
  rpc Close(EngineName) returns (Response);

  // 将棋エンジンのオプション一覧を取得する
  rpc GetOptions(EngineName) returns (Options);

  // 将棋エンジンのオプションを更新する
  rpc UpdateButton(UpdateButtonRequest) returns (Response);
  rpc UpdateCheck(UpdateCheckRequest) returns (Response);
  rpc UpdateSpin(UpdateSpinRequest) returns (Response);
  rpc UpdateSelect(UpdateSelectRequest) returns (Response);
  rpc UpdateString(UpdateStringRequest) returns (Response);
  rpc UpdateFilename(UpdateFilenameRequest) returns (Response);

  // 将棋エンジンに思考開始コマンドを実行
  rpc Start(EngineName) returns (Response);

  // 将棋エンジンに思考停止コマンドを実行
  rpc Stop(EngineName) returns (Response);

  // 将棋エンジンに局面を変更コマンドを実行
  rpc SetPosition(SetPositionRequest) returns (Response);

  // 将棋エンジンの思考結果を取得する
  rpc GetResult(EngineName) returns (Result);
}

message Request {}
message Response {}

message EngineName { string name = 1; }

message EngineNames { repeated string engines = 1; }

message SetPositionRequest {
  EngineName engine = 1;
  Position pos = 2;
}

message Position {
  // 二次元配列で持った盤上の局面
  repeated Row pos = 2;

  // 先手の持ち駒
  // [歩, 香, 桂, 銀, 金, 角, 飛] 先手の持ち駒それぞれの枚数
  repeated int32 cap0 = 3;
  // 後手の持ち駒
  // [歩, 香, 桂, 銀, 金, 角, 飛] 後手の持ち駒それぞれの枚数
  repeated int32 cap1 = 4;

  // 手番, 1: 先手, -1: 後手
  int32 turn = 5;

  // 手数
  int32 moveCount = 6;
}

message Row { repeated int32 row = 1; }

// 将棋エンジンのオプション一覧
message Options {
  map<string, Button> buttons = 1;
  map<string, Check> checks = 2;
  map<string, Spin> spins = 3;
  map<string, Select> selects = 4;
  map<string, String> strings = 5;
  map<string, Filename> filenames = 6;
}

message UpdateButtonRequest {
  EngineName engine = 1;
  Button button = 2;
}

message UpdateCheckRequest {
  EngineName engine = 1;
  Check check = 2;
}

message UpdateSpinRequest {
  EngineName engine = 1;
  Spin spin = 2;
}

message UpdateSelectRequest {
  EngineName engine = 1;
  Select select = 2;
}

message UpdateStringRequest {
  EngineName engine = 1;
  String string = 2;
}

message UpdateFilenameRequest {
  EngineName engine = 1;
  Filename filename = 2;
}

// USI の button。値は持たない。on/off の機能はなく、
// 単に押すだけということ
message Button { string name = 1; }

// USI の check。bool(true|false) の値を持つ
message Check {
  string name = 1;
  bool val = 2;
  bool default = 3;
}

// USI の spin。int の値を持つ。初期値・最小値・最大値が必要。
// 値は必ずその範囲内である必要がある
// Range とかに変えようかな
message Spin {
  string name = 1;
  int32 val = 2;
  int32 default = 3;
  int32 min = 4;
  int32 max = 5;
}

// USI の combo。Vars が選択肢で、値(Val)や Default はその Vars から選ぶ。
// Vars に存在しない値は持つことができない
message Select {
  string name = 1;
  string val = 2;
  string default = 3;
  repeated string vars = 4;
}

// USI の string。単純な文字列を値に持つ
message String {
  string name = 1;
  string val = 2;
  string default = 3;
}

// USI の filename。ファイル名とあるが、実態は String
// と全く同じただの文字列である。 String と分けているのは謎だが、USI
// でそうなっているので仕方ない
message Filename {
  string name = 1;
  string val = 2;
  string default = 3;
}

// 思考結果
message Result { map<int32, Info> result = 1; }

// USI が info ~ で出力する内容
// Info という名前は分かりづらいので変えたい
message Info {
  // depth, seldepth, time, nodes, nps, hashfull が入る
  // 将棋エンジンから必ず出力されるものではないので
  map<string, int32> values = 1;

  // 評価値
  int32 score = 2;

  // 読み
  repeated Move moves = 3;
}

// 指し手
message Move {
  // 移動元
  Point source = 1;
  // 移動先
  Point dest = 2;
  // 駒ID
  int32 pieceID = 3;
  // 成: true, 成以外: false
  bool isPromoted = 4;
}

// 盤上の位置を表す
// ７六歩なら row=5, column=6
// row と column は 0-8 | -1
// -1 は持ち駒
message Point {
  int32 row = 1;
  int32 column = 2;
}
